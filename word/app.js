// --- LOGIC CH√çNH C·ª¶A ·ª®NG D·ª§NG ---

let allWords = new Map();
let currentLesson = null;
let quizMode = "multipleChoice";
let isShowingResult = false;
let currentDirection = "jpToVn";
let sessionWords = [];
let usedWords = [];
let currentCard = null;

let currentPackageIndex = 0;
const PACKAGE_SIZE = 10; 
const BASE_QUIZ_TIMER_DURATION = 6; // Th·ªùi gian c∆° b·∫£n
const CHAR_PER_SECOND_RATE = 0.5; // T·ªëc ƒë·ªô tƒÉng th·ªùi gian theo k√Ω t·ª±

let quizTimer = null;
let timerInterval = null; // Bi·∫øn n√†y kh√¥ng c√≤n ƒë∆∞·ª£c d√πng cho hi·ªÉn th·ªã, nh∆∞ng gi·ªØ l·∫°i ƒë·ªÉ clear
let isTimedOut = false; // Bi·∫øn c·ªù ƒë·ªÉ theo d√µi tr·∫°ng th√°i h·∫øt gi·ªù ·∫©n
// let skipNextQuestionSpeech = false; // C·ªù n√†y kh√¥ng c√≤n c·∫ßn thi·∫øt khi b·ªè t√≠nh nƒÉng ph√°t √¢m

// B·ªî SUNG: H√†m ph√°t √¢m thanh s·ª≠ d·ª•ng Web Speech API (ƒê√É B·ªä LO·∫†I B·ªé)
/*
function speakText(text, applySplitLogic = true) { 
    return new Promise((resolve, reject) => {
        if (!('speechSynthesis' in window)) {
            console.warn('R·∫•t ti·∫øc, tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ t√≠nh nƒÉng ph√°t √¢m thanh.');
            resolve(); 
            return;
        }

        window.speechSynthesis.cancel(); 

        let partsToSpeak = [text]; 
        if (applySplitLogic) {
            partsToSpeak = text.split(/(I|II|III)/); 
        }
        
        let currentPartIndex = 0;

        const speakNextPart = () => {
            if (currentPartIndex >= partsToSpeak.length) {
                resolve(); 
                return;
            }

            const part = partsToSpeak[currentPartIndex].trim();

            if (applySplitLogic && (part === 'I' || part === 'II' || part === 'III')) {
                currentPartIndex++; 
                setTimeout(() => {
                    speakNextPart(); 
                }, 2000); 
            } else if (part) {
                const utterance = new SpeechSynthesisUtterance(part);
                utterance.lang = 'ja-JP';
                utterance.rate = 0.9;

                utterance.onend = () => {
                    currentPartIndex++;
                    speakNextPart(); 
                };
                utterance.onerror = (event) => {
                    console.error('SpeechSynthesisUtterance.onerror', event);
                    reject(event); 
                };

                window.speechSynthesis.speak(utterance);
            } else {
                currentPartIndex++;
                speakNextPart();
            }
        };

        speakNextPart(); 
    });
}
*/

function shuffleArray(array) {
    let currentIndex = array.length,  randomIndex;
    while (currentIndex != 0) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;
        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
    }
    return array;
}

function romajiToHiragana(text) {
    // ƒê√£ s·ª≠a c√°c k√Ω t·ª± Hiragana b·ªã sai ch√≠nh t·∫£
    const romajiMap = { 'a': '„ÅÇ', 'i': '„ÅÑ', 'u': '„ÅÜ', 'e': '„Åà', 'o': '„Åä', 'ka': '„Åã', 'ki': '„Åç', 'ku': '„Åè', 'ke': '„Åë', 'ko': '„Åì', 'sa': '„Åï', 'shi': '„Åó', 'su': '„Åô', 'se': '„Åõ', 'so': '„Åù', 'ta': '„Åü', 'chi': '„Å°', 'tsu': 'tsu', 'te': '„Å¶', 'to': '„Å®', 'na': '„Å™', 'ni': 'ni', 'nu': '„Å¨', 'ne': '„Å≠', 'no': 'no', 'ha': 'ha', 'hi': 'hi', 'fu': '„Åµ', 'he': 'he', 'ho': '„Åª', 'ma': '„Åæ', 'mi': 'mi', 'mu': '„ÇÄ', 'me': '„ÇÅ', 'mo': '„ÇÇ', 'ya': 'ya', 'yu': 'yu', 'yo': 'yo', 'ra': '„Çâ', 'ri': 'ri', 'ru': '„Çã', 're': '„Çå', 'ro': '„Çç', 'wa': '„Çè', 'wo': '„Çí', 'n': '„Çì', 'ga': '„Åå', 'gi': '„Åé', 'gu': '„Åê', 'ge': '„Åí', 'go': '„Åî', 'za': '„Åñ', 'ji': '„Åò', 'zu': 'zu', 'ze': 'ze', 'zo': '„Åû', 'da': '„Å†', 'di': '„Å¢', 'du': '„Å•', 'de': '„Åß', 'do': '„Å©', 'ba': 'ba', 'bi': '„Å≥', 'bu': '„Å∂', 'be': '„Åπ', 'bo': '„Åº', 'pa': '„Å±', 'pi': '„Å¥', 'pu': '„Å∑', 'pe': '„Å∫', 'po': '„ÅΩ', 'kya': '„Åç„ÇÉ', 'kyu': '„Åç„ÇÖ', 'kyo': '„Åç„Çá', 'sha': '„Åó„ÇÉ', 'shu': '„Åó„ÇÖ', 'sho': '„Åó„Çá', 'cha': '„Å°„ÇÉ', 'chu': '„Å°„ÇÖ', 'cho': '„Å°„Çá', 'nya': '„Å´„ÇÉ', 'nyu': '„Å´„ÇÖ', 'nyo': '„Å´„Çá', 'hya': '„Å≤„ÇÉ', 'hyu': '„Å≤„ÇÖ', 'hyo': '„Å≤„Çá', 'mya': '„Åø„ÇÉ', 'myu': '„Åø„ÇÖ', 'myo': '„Åø„Çá', 'rya': '„Çä„ÇÉ', 'ryu': '„Çä„ÇÖ', 'ryo': '„Çä„Çá', 'gya': '„Åé„ÇÉ', 'gyu': '„Åé„ÇÖ', 'gyo': '„Åé„Çá', 'ja': '„Åò„ÇÉ', 'ju': '„Åò„ÇÖ', 'jo': '„Åò„Çá', 'bya': '„Å≥„ÇÉ', 'byu': '„Å≥„ÇÖ', 'byo': '„Å≥„Çá', 'pya': '„Å¥„ÇÉ', 'pyu': '„Å¥„ÇÖ', 'pyo': '„Å¥„Çá', '-': '„Éº' };
    let result = '';
    text = text.toLowerCase();
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        const nextChar = text[i + 1];
        // X·ª≠ l√Ω √¢m ng·∫Øt '„Å£'
        if (nextChar && 'aiueo'.indexOf(nextChar) < 0 && char === nextChar && char !== 'n') { 
            result += '„Å£'; 
            continue; 
        }
        let romaji = text.substr(i, 3);
        if (romajiMap[romaji]) { 
            result += romajiMap[romaji]; 
            i += 2; 
            continue; 
        }
        romaji = text.substr(i, 2);
        if (romajiMap[romaji]) { 
            result += romajiMap[romaji]; 
            i += 1; 
            continue; 
        }
        romaji = text.substr(i, 1);
        if (romajiMap[romaji]) { 
            result += romajiMap[romaji]; 
        }
        else { 
            result += romaji; 
        }
    }
    return result;
}

const LESSON_COLUMN = 0, JP_WORD_COLUMN = 2, KANJI_COLUMN = 3, VN_WORD_COLUMN = 4;
const JP_DUMMY_COLUMNS = [9, 10, 11], VN_DUMMY_COLUMNS = [12, 13, 14];

document.getElementById('excelFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = function(e) {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });
        allWords = new Map();
        jsonData.slice(1).forEach(row => {
            const lesson = (row[LESSON_COLUMN]?.toString() || '0').trim();
            const term = (row[JP_WORD_COLUMN] || '').trim();
            const kanji = (row[KANJI_COLUMN] || '').trim();
            const meaning = (row[VN_WORD_COLUMN] || '').trim();
            if (!lesson || !term || !meaning) return;
            const vocab = { 
                term, kanji, meaning, lesson, mastered: false,
                srs: { jpToVn: 0, vnToJp: 0 },
                jpDummies: JP_DUMMY_COLUMNS.map(col => (row[col] || '').trim()).filter(d => d !== ''),
                vnDummies: VN_DUMMY_COLUMNS.map(col => (row[col] || '').trim()).filter(d => d !== '')
            };
            if (!allWords.has(lesson)) allWords.set(lesson, []);
            allWords.get(lesson).push(vocab);
        });
        updateLessonDropdown();
        localStorage.setItem('vocabData', JSON.stringify(Array.from(allWords.entries())));
        resetToHome();
        console.log('D·ªØ li·ªáu t·ª´ Excel ƒë√£ ƒë∆∞·ª£c t·∫£i v√† l∆∞u v√†o allWords:', allWords);
    };
    reader.readAsArrayBuffer(file);
});

function updateLessonDropdown() {
    const lessonSelect = document.getElementById('lessonSelect');
    const currentSelectedValue = lessonSelect.value;
    lessonSelect.innerHTML = `<option value="">-- Ch·ªçn b√†i h·ªçc --</option>`;
    
    const masteredWords = getMasteredWords();
    const summaryOption = document.createElement('option');
    summaryOption.value = 'summary';
    summaryOption.textContent = `üìö T·ªïng K·∫øt (${masteredWords.length} t·ª´ ƒë√£ thu·ªôc)`;
    lessonSelect.appendChild(summaryOption);
    
    const sortedLessons = Array.from(allWords.keys()).sort((a, b) => parseInt(a) - parseInt(b));

    sortedLessons.forEach(lesson => {
        const wordsInLesson = allWords.get(lesson) || [];
        const total = wordsInLesson.length;
        if (total === 0) return;
        const mastered = wordsInLesson.filter(word => word.mastered).length;
        
        const option = document.createElement('option');
        option.value = lesson;
        let text = `B√†i ${lesson} (${mastered}/${total})`;
        if (mastered === total) { text += ' ‚úì'; }
        option.textContent = text;
        lessonSelect.appendChild(option);
    });
    lessonSelect.value = currentSelectedValue;
    lessonSelect.disabled = false;
}

function displayPackageSelection(lesson) {
    console.log('ƒêang hi·ªÉn th·ªã g√≥i t·ª´ v·ª±ng cho b√†i:', lesson);
    clearTimeout(quizTimer);
    clearInterval(timerInterval);
    const wordsInLesson = allWords.get(lesson) || [];
    const totalWords = wordsInLesson.length;
    console.log('T·ªïng s·ªë t·ª´ trong b√†i n√†y:', totalWords);

    document.getElementById('cardContainer').innerHTML = '';
    if (totalWords === 0) {
        document.getElementById('cardContainer').innerHTML = '<p>B√†i h·ªçc n√†y kh√¥ng c√≥ t·ª´ v·ª±ng.</p>';
        return;
    }
    const numPackages = Math.ceil(totalWords / PACKAGE_SIZE);
    let packageHtml = `<h3 class="package-title">Ch·ªçn g√≥i t·ª´ v·ª±ng cho B√†i ${lesson}</h3><div class="package-container">`;
    for (let i = 0; i < numPackages; i++) {
        const startWordIndex = i * PACKAGE_SIZE;
        // S·ª≠a l·ªói: ƒê·∫£m b·∫£o endIndex ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë√∫ng trong chu·ªói template
        const currentEndIndex = Math.min(startWordIndex + PACKAGE_SIZE, totalWords); 
        const packageWords = wordsInLesson.slice(startWordIndex, currentEndIndex);
        const masteredInPackage = packageWords.filter(w => w.mastered).length;
        const isCompleted = masteredInPackage === packageWords.length;
        packageHtml += `
            <button class="package-btn ${isCompleted ? 'completed' : ''}" onclick="startPackage('${lesson}', ${i})">
                <div class="package-btn-name">G√≥i ${i + 1} <small>(T·ª´ ${startWordIndex + 1} - ${currentEndIndex})</small></div>
                <div class="package-btn-progress">
                    <span class="progress-text">${masteredInPackage} / ${packageWords.length}</span>
                    ${isCompleted ? '<span class="completed-check">‚úì</span>' : ''}
                </div>
            </button>`;
    }
    packageHtml += '</div>';

    // Th√™m n√∫t "Th·ª≠ th√°ch v√¥ h·∫°n" n·∫øu t·∫•t c·∫£ c√°c g√≥i trong b√†i ƒë√£ ho√†n th√†nh
    const allMasteredInLesson = wordsInLesson.every(word => word.mastered);
    if (allMasteredInLesson && totalWords > 0) {
        packageHtml += `
            <div class="infinite-challenge-section">
                <button class="action-btn" onclick="startInfiniteChallenge('${lesson}')">
                    ‚ö° Th·ª≠ th√°ch v√¥ h·∫°n B√†i ${lesson}
                </button>
            </div>`;
    }

    document.getElementById('cardContainer').innerHTML = packageHtml;
}

function startPackage(lesson, packageIndex) {
    currentLesson = lesson;
    currentPackageIndex = packageIndex;
    const wordsInLesson = allWords.get(lesson) || [];
    const startIndex = packageIndex * PACKAGE_SIZE;
    const endIndex = startIndex + PACKAGE_SIZE;
    sessionWords = wordsInLesson.slice(startIndex, endIndex);
    usedWords = [];
    showNextCard();
    updateBackButton();
}

// H√†m m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu Th·ª≠ th√°ch v√¥ h·∫°n
function startInfiniteChallenge(lessonNum) {
    currentLesson = `infinite_challenge_${lessonNum}`; // ƒê·∫∑t t√™n ƒë·∫∑c bi·ªát ƒë·ªÉ ph√¢n bi·ªát
    sessionWords = allWords.get(lessonNum) || []; // L·∫•y t·∫•t c·∫£ t·ª´ c·ªßa b√†i ƒë√≥
    usedWords = []; // Reset used words
    if (sessionWords.length === 0) {
        document.getElementById('cardContainer').innerHTML = `<p class="placeholder-text">B√†i ${lessonNum} kh√¥ng c√≥ t·ª´ v·ª±ng ƒë·ªÉ th·ª≠ th√°ch v√¥ h·∫°n.</p>`;
        return;
    }
    showNextCard();
    updateBackButton();
    updateStats(); // C·∫≠p nh·∫≠t th·ªëng k√™ cho to√†n b√†i
}


function updateSRS(card, isCorrect, directionKey) {
    if (isCorrect) {
        if (card.srs[directionKey] < 3) card.srs[directionKey]++;
    } else {
        // Reset c·∫£ hai chi·ªÅu n·∫øu tr·∫£ l·ªùi sai ho·∫∑c h·∫øt gi·ªù
        card.srs.jpToVn = 0;
        card.srs.vnToJp = 0;
    }
    card.mastered = card.srs.jpToVn >= 3 && card.srs.vnToJp >= 3;
    localStorage.setItem('vocabData', JSON.stringify(Array.from(allWords.entries())));
}

function showNextCard() {
    isShowingResult = false;
    isTimedOut = false; // Reset c·ªù h·∫øt gi·ªù cho th·∫ª m·ªõi
    clearTimeout(quizTimer); // X√≥a b·∫•t k·ª≥ b·ªô ƒë·∫øm th·ªùi gian n√†o ƒëang ch·∫°y
    clearInterval(timerInterval); // X√≥a b·∫•t k·ª≥ interval n√†o ƒëang ch·∫°y (kh√¥ng c√≤n d√πng cho hi·ªÉn th·ªã)

    const container = document.getElementById('cardContainer');
    if (!sessionWords || sessionWords.length === 0) return;

    let availableWords;
    // Logic cho Th·ª≠ th√°ch v√¥ h·∫°n v√† T·ªïng k·∫øt
    if (currentLesson === 'summary' || currentLesson.startsWith('infinite_challenge_')) {
        availableWords = sessionWords.filter(word => !usedWords.slice(-3).includes(word));
        if (availableWords.length === 0 && sessionWords.length > 0) {
            usedWords = [];
            availableWords = sessionWords;
        }
        // N·∫øu kh√¥ng c√≥ t·ª´ n√†o kh·∫£ d·ª•ng sau khi reset, hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
        if (!availableWords || availableWords.length === 0) {
            container.innerHTML = `<p>üéâ B·∫°n ƒë√£ √¥n t·∫≠p h·∫øt c√°c t·ª´ trong phi√™n n√†y.</p>`;
            return;
        }
    } 
    // Logic cho h·ªçc theo g√≥i th√¥ng th∆∞·ªùng
    else {
        const allMasteredInPackage = sessionWords.every(word => word.mastered);
        if (allMasteredInPackage) {
            const totalWordsInLesson = (allWords.get(currentLesson) || []).length;
            const totalPackages = Math.ceil(totalWordsInLesson / PACKAGE_SIZE);
            let completionHtml = `<div class="card result-feedback"><p class="feedback-correct">üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh G√≥i ${currentPackageIndex + 1}.</p>`;
            if (currentPackageIndex + 1 < totalPackages) {
                completionHtml += `<button class="action-btn" onclick="startPackage('${currentLesson}', ${currentPackageIndex + 1})">H·ªçc G√≥i ti·∫øp theo</button>`;
            } else {
                completionHtml += `<p>B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c g√≥i cho B√†i ${currentLesson}!</p>`;
            }
            completionHtml += `<button class="back-button" onclick="displayPackageSelection('${currentLesson}')">Quay l·∫°i ch·ªçn g√≥i</button></div>`;
            container.innerHTML = completionHtml;
            updateStats();
            return;
        }
        availableWords = sessionWords.filter(word => !word.mastered && !usedWords.slice(-3).includes(word));
        if (availableWords.length === 0) {
            usedWords = [];
            availableWords = sessionWords.filter(word => !word.mastered);
        }
    }

    if (!availableWords || availableWords.length === 0) {
        if (currentLesson !== 'summary' && !currentLesson.startsWith('infinite_challenge_')) {
            displayPackageSelection(currentLesson);
        } else {
            container.innerHTML = `<p>üéâ B·∫°n ƒë√£ √¥n t·∫≠p h·∫øt c√°c t·ª´ trong phi√™n n√†y.</p>`;
        }
        return;
    }
    
    currentCard = availableWords[Math.floor(Math.random() * availableWords.length)];
    usedWords.push(currentCard);
    if (quizMode === "input") {
        showInputCard(currentCard);
    } else {
        showMultipleChoiceCard(currentCard);
        // T√≠nh to√°n th·ªùi gian ƒë·ªông
        const termToMeasure = currentCard.kanji ? `${currentCard.term} (${currentCard.kanji})` : currentCard.term;
        const dynamicQuizDuration = BASE_QUIZ_TIMER_DURATION + Math.max(0, termToMeasure.length - 4) * CHAR_PER_SECOND_RATE;
        console.log(`T·ª´: "${termToMeasure}" (${termToMeasure.length} k√Ω t·ª±), Th·ªùi gian: ${dynamicQuizDuration.toFixed(2)} gi√¢y`); // Log th·ªùi gian ƒë·ªông

        // Thi·∫øt l·∫≠p b·ªô ƒë·∫øm th·ªùi gian ·∫©n v·ªõi th·ªùi gian ƒë·ªông
        const directionKey = currentDirection === 'vnToJp' ? 'vnToJp' : 'jpToVn'; // X√°c ƒë·ªãnh chi·ªÅu ƒë·ªÉ reset SRS
        quizTimer = setTimeout(() => {
            isTimedOut = true;
            updateSRS(currentCard, false, directionKey); // ƒê·∫∑t l·∫°i SRS m·ªôt c√°ch ·∫©n n·∫øu h·∫øt gi·ªù
        }, dynamicQuizDuration * 1000);
    }
}


function showMultipleChoiceCard(card) {
    let isReverse;
    const { jpToVn, vnToJp } = card.srs;
    const needsJpVn = jpToVn < 3;
    const needsVnJp = vnToJp < 3;
    
    // C·∫£i thi·ªán logic tr·ªôn c√¢u h·ªèi:
    if (needsJpVn && needsVnJp) {
        // N·∫øu c·∫£ hai chi·ªÅu ƒë·ªÅu c·∫ßn √¥n t·∫≠p, ch·ªçn ng·∫´u nhi√™n
        isReverse = Math.random() < 0.5; // 50% VN->JP, 50% for JP->VN
    } else if (needsVnJp) {
        isReverse = true; // Ch·ªâ c·∫ßn √¥n t·∫≠p VN->JP
    } else {
        isReverse = false; // Ch·ªâ c·∫ßn √¥n t·∫≠p JP->VN, ho·∫∑c t·ª´ ƒë√£ thu·ªôc ho√†n to√†n
    }

    const displayText = isReverse ? card.meaning : (card.kanji ? `${card.term} (${card.kanji})` : card.term);
    const correctAnswer = isReverse ? (card.kanji ? `${card.term} (${card.kanji})` : card.term) : card.meaning;
    const choices = generateChoices(isReverse, card);
    const statusTag = card.mastered ? '<span class="mastered-tag">‚úì ƒê√£ thu·ªôc</span>' : (jpToVn > 0 || vnToJp > 0 ? '<span class="review-tag">‚è≥ ƒêang h·ªçc...</span>' : '');
    
    // C·∫¢I TI·∫æN: Th√™m n√∫t loa khi hi·ªÉn th·ªã t·ª´ ti·∫øng Nh·∫≠t (ƒê√É B·ªä LO·∫†I B·ªé CH·ª®C NƒÇNG)
    // const speakButton = !isReverse ? `<button class="speak-btn" onclick="speakText('${card.term}', true)">üîä</button>` : ''; 

    document.getElementById('cardContainer').innerHTML = `
        <div class="card">
            <h2>${displayText} ${statusTag}</h2>
            <div class="choices-container">${choices.map(choice => `<button class="choice-btn" onclick="handleChoiceClick(this, '${choice.replace(/'/g, "\\'")}', '${correctAnswer.replace(/'/g, "\\'")}', ${isReverse})">${choice}</button>`).join('')}</div>
            <div id="keyGuide">B·∫•m ph√≠m s·ªë 1-4 ƒë·ªÉ ch·ªçn</div>
        </div>`;
    
    // T·ª± ƒë·ªông ph√°t √¢m khi hi·ªÉn th·ªã c√¢u h·ªèi ti·∫øng Nh·∫≠t (ƒê√É B·ªä LO·∫†I B·ªé CH·ª®C NƒÇNG)
    /*
    if (!isReverse && !skipNextQuestionSpeech) { 
        speakText(card.term, true); 
    }
    skipNextQuestionSpeech = false; 
    */
}

function generateChoices(isReverse, currentCard) {
    // X√°c ƒë·ªãnh c√¢u tr·∫£ l·ªùi ƒë√∫ng
    const correctAnswer = isReverse
        ? (currentCard.kanji ? `${currentCard.term} (${currentCard.kanji})` : currentCard.term)
        : currentCard.meaning;
        
    const allPossibleWords = Array.from(allWords.values()).flat();
    let choices = [correctAnswer];
    const uniqueAnswers = new Set(choices);

    // L·∫•y c√°c ƒë√°p √°n nhi·ªÖu ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a tr∆∞·ªõc trong file Excel
    const currentDummies = isReverse ? currentCard.jpDummies : currentCard.vnDummies;
    currentDummies.forEach(dummy => {
        if (choices.length >= 4) return;
        let processedDummy = dummy;
        // N·∫øu c√°c l·ª±a ch·ªçn l√† ti·∫øng Nh·∫≠t, th√™m kanji cho c√°c t·ª´ nhi·ªÖu n·∫øu c√≥
        if (isReverse) {
            const kanjiData = allPossibleWords.find(w => w.term === dummy);
            if (kanjiData && kanjiData.kanji) {
                processedDummy = `${dummy} (${kanjiData.kanji})`;
            }
        }
        if (!uniqueAnswers.has(processedDummy)) {
            choices.push(processedDummy);
            uniqueAnswers.add(processedDummy);
        }
    });

    // L·∫•y th√™m c√°c t·ª´ kh√°c trong to√†n b·ªô t·ª´ v·ª±ng ƒë·ªÉ l√†m ƒë√°p √°n nhi·ªÖu
    const otherWords = allPossibleWords.filter(word => word.term !== currentCard.term);
    shuffleArray(otherWords);

    while (choices.length < 4 && otherWords.length > 0) {
        const word = otherWords.pop();
        
        // S·ª¨A L·ªñI: ƒê·∫£m b·∫£o "candidate" (ƒë√°p √°n nhi·ªÖu) lu√¥n l√† ng√¥n ng·ªØ ƒë√∫ng
        // N·∫øu isReverse (h·ªèi ti·∫øng Vi·ªát), c√°c l·ª±a ch·ªçn ph·∫£i l√† ti·∫øng Nh·∫≠t.
        // N·∫øu kh√¥ng (h·ªèi ti·∫øng Nh·∫≠t), c√°c l·ª±a ch·ªçn ph·∫£i l√† ti·∫øng Vi·ªát.
        const candidate = isReverse
            ? (word.kanji ? `${word.term} (${word.kanji})` : word.term) // L·ª±a ch·ªçn ti·∫øng Nh·∫≠t
            : word.meaning; // L·ª±a ch·ªçn ti·∫øng Vi·ªát

        if (!uniqueAnswers.has(candidate)) {
            choices.push(candidate);
            uniqueAnswers.add(candidate);
        }
    }
    
    return shuffleArray(choices);
}

function handleChoiceClick(button, selectedValue, correctAnswer, isReverse) {
    if (isShowingResult) return; // NgƒÉn ch·∫∑n x·ª≠ l√Ω nhi·ªÅu l·∫ßn n·∫øu click nhanh
    clearTimeout(quizTimer); // D·ª´ng b·ªô ƒë·∫øm th·ªùi gian ·∫©n
    clearInterval(timerInterval); // D·ª´ng interval (n·∫øu c√≥, m·∫∑c d√π kh√¥ng c√≤n d√πng cho hi·ªÉn th·ªã)
    isShowingResult = true; // ƒê√°nh d·∫•u r·∫±ng m·ªôt c√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω

    const isCorrectAttempt = selectedValue === correctAnswer; // User's current selection is correct
    const directionKey = isReverse ? 'vnToJp' : 'jpToVn';

    // √Åp d·ª•ng ph·∫£n h·ªìi tr·ª±c quan ngay l·∫≠p t·ª©c
    document.querySelectorAll('.choice-btn').forEach(btn => {
        btn.disabled = true; // V√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c n√∫t sau khi ch·ªçn
        if (btn.textContent.trim() === correctAnswer) btn.classList.add('correct');
    });
    if (!isCorrectAttempt) button.classList.add('incorrect');

    // C·∫≠p nh·∫≠t SRS ch·ªâ khi KH√îNG h·∫øt gi·ªù.
    // N·∫øu h·∫øt gi·ªù (isTimedOut l√† true), SRS ƒë√£ ƒë∆∞·ª£c reset b·ªüi quizTimer.
    if (!isTimedOut) { 
        updateSRS(currentCard, isCorrectAttempt, directionKey);
    } 

    // Determine what text to speak and when to transition
    // let speechPromise = Promise.resolve(); // M·∫∑c ƒë·ªãnh l√† Promise ƒë√£ gi·∫£i quy·∫øt n·∫øu kh√¥ng c√≥ ph√°t √¢m (ƒê√É B·ªä LO·∫†I B·ªé)
    let delayBeforeNextAction = 1000; // ƒê·ªô tr·ªÖ m·∫∑c ƒë·ªãnh cho ph·∫£n h·ªìi t√≠ch c·ª±c

    if (isCorrectAttempt) { // N·∫øu ng∆∞·ªùi d√πng tr·∫£ l·ªùi ƒë√∫ng (d√π trong hay ngo√†i th·ªùi gian)
        // if (isReverse) { // N·∫øu c√¢u h·ªèi l√† ti·∫øng Vi·ªát, ƒë√°p √°n ƒë√∫ng l√† ti·∫øng Nh·∫≠t (ƒê√É B·ªä LO·∫†I B·ªé CH·ª®C NƒÇNG PH√ÅT √ÇM)
        //     speechPromise = speakText(correctAnswer, true); 
        //     delayBeforeNextAction = 1000; 
        //     skipNextQuestionSpeech = true; 
        // } else { 
            delayBeforeNextAction = 1000; 
            // skipNextQuestionSpeech = false; // ƒê·∫£m b·∫£o c·ªù l√† false n·∫øu kh√¥ng c·∫ßn b·ªè qua (ƒê√É B·ªä LO·∫†I B·ªé)
        // }
    } else if (currentLesson === 'summary' && !isCorrectAttempt) { 
        const originalLesson = currentCard.lesson;
        sessionWords = sessionWords.filter(word => word.term !== currentCard.term); 
        setTimeout(() => {
            document.getElementById('cardContainer').innerHTML = `<div class="card result-feedback"><p class="feedback-incorrect">üî¥ Tr·∫£ l·ªùi sai!</p><p>T·ª´ n√†y ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v·ªÅ <strong>B√†i ${originalLesson}</strong> ƒë·ªÉ √¥n t·∫≠p l·∫°i.</p></div>`;
            setTimeout(() => { showNextCard(); updateStats(); updateLessonDropdown(); }, 2500);
        }, 1500);
        return; 
    } else { 
        delayBeforeNextAction = 2000; 
        // speechPromise = Promise.resolve(); // Kh√¥ng ph√°t √¢m cho c√¢u tr·∫£ l·ªùi sai (ƒê√É B·ªä LO·∫†I B·ªé)
        // skipNextQuestionSpeech = false; // ƒê·∫£m b·∫£o c·ªù l√† false n·∫øu kh√¥ng c·∫ßn b·ªè qua (ƒê√É B·ªä LO·∫†I B·ªé)
    }

    // Ch·ªù cho vi·ªác ph√°t √¢m ho√†n t·∫•t (n·∫øu c√≥), sau ƒë√≥ th·ª±c hi·ªán b∆∞·ªõc ti·∫øp theo (ƒê√É B·ªä LO·∫†I B·ªé)
    // speechPromise.then(() => {
        setTimeout(() => {
            if (isCorrectAttempt) { 
                showNextCard();
            } else { 
                isShowingResult = false; 
                if (quizMode === 'input') {
                    showInputCard(currentCard);
                } else {
                    showMultipleChoiceCard(currentCard);
                }
            }
            updateStats(); 
            updateLessonDropdown(); 
        }, delayBeforeNextAction);
    // }).catch(error => {
    //     console.error("L·ªói trong qu√° tr√¨nh ph√°t √¢m ho·∫∑c chuy·ªÉn ƒë·ªïi:", error);
    //     // Fallback: ti·∫øp t·ª•c m√† kh√¥ng ph√°t √¢m n·∫øu c√≥ l·ªói
    //     setTimeout(() => {
    //         if (isCorrectAttempt) {
    //             showNextCard();
    //         } else {
    //             isShowingResult = false;
    //             if (quizMode === 'input') {
    //                 showInputCard(currentCard);
    //             } else {
    //                 showMultipleChoiceCard(currentCard);
    //             }
    //         }
    //         updateStats();
    //         updateLessonDropdown();
    //     }, delayBeforeNextAction);
    // });
}

// H√†m handleTimeout v√† startChoiceTimer ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè v√¨ kh√¥ng c√≤n hi·ªÉn th·ªã b·ªô ƒë·∫øm gi·ªù

function showInputCard(card) {
    const isReverse = currentDirection === 'vnToJp';
    const displayText = isReverse ? card.meaning : (card.kanji ? `${card.term} (${card.kanji})` : card.term);
    const placeholder = isReverse ? "Nh·∫≠p ti·∫øng Nh·∫≠t..." : "Nh·∫≠p nghƒ©a ti·∫øng Vi·ªát...";
    const correctAnswer = isReverse ? card.term : card.meaning;
    const statusTag = card.mastered ? '<span class="mastered-tag">‚úì ƒê√£ thu·ªôc</span>' : (card.srs.jpToVn > 0 || card.srs.vnToJp > 0 ? '<span class="review-tag">‚è≥ ƒêang h·ªçc...</span>' : '');
    
    // C·∫¢I TI·∫æN: Th√™m n√∫t loa khi hi·ªÉn th·ªã t·ª´ ti·∫øng Nh·∫≠t (ƒê√É B·ªä LO·∫†I B·ªé CH·ª®C NƒÇNG)
    // const speakButton = !isReverse ? `<button class="speak-btn" onclick="speakText('${card.term}', true)">üîä</button>` : ''; 

    document.getElementById('cardContainer').innerHTML = `
        <div class="card">
            <h2>${displayText} ${statusTag}</h2>
            <input type="text" id="answerInput" onkeypress="handleKeyPress(event, '${correctAnswer.replace(/'/g, "\\'")}')" placeholder="${placeholder}" autocomplete="off" autocapitalize="off">
            <button onclick="checkAnswer('${correctAnswer.replace(/'/g, "\\'")}')">Ki·ªÉm tra</button>
        </div>`;
    setTimeout(() => document.getElementById('answerInput')?.focus(), 50);
}

function checkAnswer(correctAnswer) {
    if (isShowingResult) return;
    isShowingResult = true;
    const inputField = document.getElementById('answerInput');
    let userAnswer = inputField.value.trim();
    let isCorrect = false;
    const directionKey = currentDirection === 'vnToJp' ? 'vnToJp' : 'jpToVn';
    if (directionKey === 'vnToJp') {
        isCorrect = (romajiToHiragana(userAnswer) === correctAnswer);
    } else {
        isCorrect = (userAnswer.toLowerCase() === correctAnswer.toLowerCase());
    }
    updateSRS(currentCard, isCorrect, directionKey);
    inputField.disabled = true;
    inputField.nextElementSibling.disabled = true;
    inputField.style.background = isCorrect ? 'var(--success-color)' : 'var(--error-color)';
    if (isCorrect) {
        setTimeout(() => { showNextCard(); updateStats(); updateLessonDropdown(); }, 1000);
    } else {
        setTimeout(() => {
            document.getElementById('cardContainer').innerHTML = `<div class="card result-feedback"><p class="feedback-incorrect">üî¥ Tr·∫£ l·ªùi sai!</p><p>ƒê√°p √°n ƒë√∫ng l√†: <strong>${correctAnswer}</strong></p></div>`;
            setTimeout(() => { 
                isShowingResult = false; 
                if (quizMode === 'input') showInputCard(currentCard); else showMultipleChoiceCard(currentCard);
                updateStats(); updateLessonDropdown();
            }, 2500);
        }, 1500);
    }
}

function updateStats() {
    let wordsForStats = [];
    let title = "T·ªïng quan";
    if (currentLesson && currentLesson !== 'summary' && !currentLesson.startsWith('infinite_challenge_')) {
        wordsForStats = allWords.get(currentLesson) || [];
        title = `B√†i ${currentLesson}`;
    } else if (currentLesson && currentLesson.startsWith('infinite_challenge_')) {
        const lessonNum = currentLesson.split('_')[2];
        wordsForStats = allWords.get(lessonNum) || [];
        title = `Th·ª≠ th√°ch v√¥ h·∫°n B√†i ${lessonNum}`;
    }
    else {
        wordsForStats = Array.from(allWords.values()).flat();
    }
    const statsHeader = document.querySelector('#stats h3');
    if (statsHeader) statsHeader.textContent = `üìä Th·ªëng k√™ (${title})`;
    const total = wordsForStats.length;
    const learned = wordsForStats.filter(word => word.mastered).length;
    const learning = wordsForStats.filter(word => !word.mastered && (word.srs.jpToVn > 0 || word.srs.vnToJp > 0)).length;
    const newWords = total - learned - learning;
    document.getElementById("totalWords").textContent = total;
    document.getElementById("learnedWords").textContent = learned;
    document.getElementById("learningWords").textContent = learning; 
    document.getElementById("newWords").textContent = newWords;
}

function getMasteredWords() {
    return Array.from(allWords.values()).flat().filter(word => word.mastered);
}

function handleKeyPress(e, correctAnswer) {
    if (e.key === 'Enter') {
        e.preventDefault();
        checkAnswer(correctAnswer);
    }
}

document.addEventListener('keydown', (e) => {
    if (!isShowingResult && quizMode === 'multipleChoice' && ['1', '2', '3', '4'].includes(e.key)) {
        e.preventDefault();
        const index = parseInt(e.key) - 1;
        const buttons = document.querySelectorAll('.choice-btn');
        if (buttons.length > index) buttons[index].click();
    }
});

function initSessionForSummary() {
    currentLesson = 'summary';
    sessionWords = getMasteredWords();
    usedWords = [];
    updateBackButton();
    if (sessionWords.length === 0) {
        document.getElementById('cardContainer').innerHTML = '<p class="placeholder-text">Ch∆∞a c√≥ t·ª´ n√†o ƒë∆∞·ª£c h·ªçc thu·ªôc ƒë·ªÉ t·ªïng k·∫øt.</p>';
        return;
    }
    showNextCard();
}

function onLessonChange() {
    console.log('onLessonChange ƒë∆∞·ª£c g·ªçi. Gi√° tr·ªã ƒë√£ ch·ªçn:', document.getElementById('lessonSelect').value);
    clearTimeout(quizTimer);
    clearInterval(timerInterval);
    currentPackageIndex = 0; // Reset package index
    sessionWords = []; // Clear session words

    const selectedValue = document.getElementById('lessonSelect').value;
    
    if (selectedValue && selectedValue !== 'summary') {
        currentLesson = selectedValue;
        displayPackageSelection(currentLesson);
    } else if (selectedValue === 'summary') {
        initSessionForSummary();
    } else {
        resetToHome();
    }
    updateBackButton();
    updateStats();
}

function onQuizModeChange() {
    quizMode = document.getElementById('quizMode').value;
    document.getElementById('direction').style.display = quizMode === "input" ? "inline-block" : "none";
    if (sessionWords.length > 0) showNextCard();
}

function onDirectionChange() {
    currentDirection = document.getElementById('direction').value;
    if (sessionWords.length > 0) showNextCard();
}

function updateBackButton() {
    const container = document.getElementById('backButtonContainer');
    if (currentLesson && currentLesson !== 'summary' && !currentLesson.startsWith('infinite_challenge_') && sessionWords.length > 0) {
        container.innerHTML = `<button class="back-button" onclick="displayPackageSelection('${currentLesson}')">‚Üê Quay l·∫°i ch·ªçn g√≥i</button>`;
    } else if (currentLesson) {
        container.innerHTML = `<button class="back-button" onclick="resetToHome()">‚Üê Quay l·∫°i danh s√°ch b√†i</button>`;
    } else {
        container.innerHTML = '';
    }
}

function resetToHome() {
    clearTimeout(quizTimer);
    clearInterval(timerInterval);
    document.getElementById('lessonSelect').value = '';
    currentLesson = null;
    sessionWords = [];
    updateBackButton();
    document.getElementById('cardContainer').innerHTML = '<p class="placeholder-text">Vui l√≤ng ch·ªçn m·ªôt b√†i h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>';
    updateStats();
}

function exportData() {
    const data = localStorage.getItem('vocabData');
    if (!data) return alert('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!');
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vocab-backup-${new Date().toISOString().slice(0, 10)}.json`;
    a.click();
    URL.revokeObjectURL(url);
}

document.getElementById('importFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importedData = JSON.parse(e.target.result);
            if (!Array.isArray(importedData)) throw new Error("Invalid format");
            allWords = new Map(importedData);
            for(const words of allWords.values()){
                words.forEach(word => {
                    if(!word.srs) {
                        word.srs = { jpToVn: word.repetitions >= 3 ? 3 : 0, vnToJp: word.repetitions >= 3 ? 3 : 0 };
                        delete word.repetitions;
                    }
                });
            }
            localStorage.setItem('vocabData', JSON.stringify(Array.from(allWords.entries())));
            updateLessonDropdown();
            resetToHome();
            alert('Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng! D·ªØ li·ªáu c≈© ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.');
            console.log('D·ªØ li·ªáu t·ª´ JSON ƒë√£ ƒë∆∞·ª£c nh·∫≠p v√† l∆∞u v√†o allWords:', allWords);
        } catch (error) {
            alert('File kh√¥ng h·ª£p l·ªá!');
            console.error(error);
        }
    };
    reader.readAsText(file);
    e.target.value = '';
});

function setTheme(theme) {
    localStorage.setItem('theme', theme);
    document.body.setAttribute('data-theme', theme);
    const toggleButton = document.getElementById('theme-toggle');
    if (toggleButton) {
        toggleButton.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        toggleButton.title = theme === 'dark' ? 'Chuy·ªÉn sang giao di·ªán s√°ng' : 'Chuy·ªÉn sang giao di·ªán t·ªëi';
    }
}

function toggleTheme() {
    const currentTheme = localStorage.getItem('theme') || 'light';
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
}

function initTheme() {
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    if (savedTheme) setTheme(savedTheme);
    else if (prefersDark) setTheme('dark');
    else setTheme('light');
}

window.onload = () => {
    initTheme();
    document.getElementById('theme-toggle').addEventListener('click', toggleTheme);
    const savedData = localStorage.getItem('vocabData');
    if (savedData) {
        try {
            const parsedData = JSON.parse(savedData);
            if (Array.isArray(parsedData)) {
                allWords = new Map(parsedData);
                for(const words of allWords.values()){
                    words.forEach(word => {
                        if(word.repetitions !== undefined) {
                            word.srs = { jpToVn: 0, vnToJp: 0 };
                            if(word.mastered) {
                                word.srs.jpToVn = 3;
                                word.srs.vnToJp = 3;
                            }
                            delete word.repetitions;
                        }
                    });
                }
            }
            else localStorage.removeItem('vocabData');
        } catch (e) {
            console.error("Could not parse vocabData from localStorage", e);
            localStorage.removeItem('vocabData');
        }
    }
    updateLessonDropdown();
    resetToHome();
    onQuizModeChange();
    console.log('·ª®ng d·ª•ng ƒë√£ t·∫£i xong. D·ªØ li·ªáu allWords ban ƒë·∫ßu:', allWords);
};

const style = document.createElement('style');
style.textContent = `
:root {
    --font-body: 'Noto Sans JP', sans-serif; --font-heading: 'Montserrat', sans-serif;
    --success-color: #28a745; --error-color: #dc3545; --warning-color: #ffc107;
}
body[data-theme='light'] {
    --primary-gradient: linear-gradient(135deg, #2575fc 0%, #6a11cb 100%);
    --bg-main: #f4f7f9; --bg-content: #ffffff; --bg-card: rgba(255, 255, 255, 0.8);
    --border-color: #e0e6ed; --text-primary: #1e1e1e; --text-secondary: #5a6268;
    --text-accent: #0056b3; --shadow-light: rgba(0, 0, 0, 0.1); --shadow-heavy: rgba(0, 0, 0, 0.15);
}
body[data-theme='dark'] {
    --primary-gradient: linear-gradient(135deg, #82aaff 0%, #2575fc 100%);
    --bg-main: #121212; --bg-content: #1e1e1e; --bg-card: rgba(42, 42, 62, 0.7);
    --border-color: rgba(255, 255, 255, 0.1); --text-primary: #ffffff; --text-secondary: #a0a0b0;
    --text-accent: #82aaff; --shadow-light: rgba(0, 0, 0, 0.2); --shadow-heavy: rgba(0, 0, 0, 0.4);
}
* { box-sizing: border-box; margin: 0; padding: 0; }
body { font-family: var(--font-body); background-color: var(--bg-main); color: var(--text-primary); line-height: 1.6; padding: 15px; transition: background-color 0.3s, color 0.3s; }
.container { max-width: 700px; margin: 0 auto; padding: 20px; background: var(--bg-content); border-radius: 24px; border: 1px solid var(--border-color); box-shadow: 0 16px 40px var(--shadow-heavy); transition: background-color 0.3s, border-color 0.3s; }
header { text-align: center; margin-bottom: 25px; }
.header-top { display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; }
h1 { font-family: var(--font-heading); font-weight: 700; color: var(--text-primary); font-size: 1.8rem; }
header p { color: var(--text-secondary); }
h3 { font-family: var(--font-heading); font-weight: 700; margin-bottom: 15px; text-align: center; color: var(--text-accent); }
.main-controls { text-align: center; margin-bottom: 20px; }
.file-label { display: inline-block; padding: 12px 25px; background: var(--primary-gradient); color: white; border-radius: 8px; cursor: pointer; font-weight: 700; font-family: var(--font-heading); transition: all 0.3s ease; box-shadow: 0 4px 15px var(--shadow-light); }
.file-label:hover { transform: translateY(-3px) scale(1.05); }
.file-input { display: none; }
.lesson-controls { display: flex; gap: 15px; margin-bottom: 25px; flex-wrap: wrap; }
select { flex-grow: 1; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-content); color: var(--text-primary); font-family: var(--font-body); font-size: 16px; cursor: pointer; min-width: 150px; transition: background-color 0.3s, border-color 0.3s, color 0.3s; }
select:focus { outline: 2px solid var(--text-accent); }
#stats { background: var(--bg-main); border-radius: 12px; padding: 20px; margin-bottom: 25px; border: 1px solid var(--border-color); transition: background-color 0.3s, border-color 0.3s; }
.stats-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; text-align: center; }
.stat-item .stat-label { font-size: 14px; color: var(--text-secondary); }
.stat-item .stat-value { font-size: 24px; font-weight: 700; color: var(--text-accent); }
#learnedWords { color: var(--success-color); }
#learningWords { color: var(--warning-color); }
.card { background: var(--bg-card); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid var(--border-color); padding: 30px; border-radius: 16px; box-shadow: 0 4px 20px var(--shadow-light); text-align: center; position: relative; overflow: hidden; transition: background-color 0.3s, border-color 0.3s; }
.card h2 { font-size: clamp(1.8rem, 5vw, 2.5rem); font-weight: 700; margin-bottom: 20px; display: flex; align-items: center; justify-content: center; flex-wrap: wrap; gap: 5px 15px;}
#answerInput { width: 100%; padding: 12px; font-size: 18px; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-main); color: var(--text-primary); margin: 20px 0; text-align: center; transition: background-color 0.3s, border-color 0.3s, color 0.3s;}
#answerInput::placeholder { color: var(--text-secondary); }
#answerInput:focus { border-color: var(--text-accent); outline: none; }
.choices-container { display: grid; grid-template-columns: 1fr; gap: 12px; margin: 20px 0; }
.choice-btn { padding: 15px; background: rgba(255, 255, 255, 0.05); border: 1px solid var(--border-color); color: var(--text-secondary); border-radius: 8px; cursor: pointer; font-size: 18px; font-weight: 500; text-align: center; transition: all 0.2s ease; }
.choice-btn:hover:not(:disabled) { transform: translateY(-3px); background: rgba(255, 255, 255, 0.1); color: var(--text-primary); border-color: var(--text-accent); }
.choice-btn.correct { background: var(--success-color) !important; color: white !important; border-color: var(--success-color) !important; }
.choice-btn.incorrect { background: var(--error-color) !important; color: white !important; border-color: var(--error-color) !important; }
#keyGuide { font-size: 14px; color: var(--text-secondary); margin-top: 15px; }
.package-title { margin-bottom: 20px; }
.package-container { display: flex; flex-direction: column; gap: 10px; }
.package-btn { display: flex; justify-content: space-between; align-items: center; padding: 15px; text-align: left; background: var(--bg-card); border: 1px solid var(--border-color); border-radius: 8px; cursor: pointer; transition: all 0.2s; font-size: 1em; color: var(--text-secondary); }
.package-btn:hover { transform: translateY(-3px); background: rgba(255, 255, 255, 0.1); color: var(--text-primary); border-color: var(--text-accent); }
.package-btn.completed { border-left: 5px solid var(--success-color); background: rgba(40, 167, 69, 0.1); color: var(--text-primary); }
.package-btn-name { color: var(--text-primary); }
.completed-check { color: var(--success-color); }
footer { padding-top: 20px; border-top: 1px solid var(--border-color); display: flex; gap: 15px; justify-content: center; }
.footer-btn { background: transparent; border: 1px solid var(--border-color); color: var(--text-secondary); padding: 8px 15px; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; }
.footer-btn:hover { background: var(--bg-card); color: var(--text-primary); }
.back-button, .action-btn { width: 100%; padding: 12px; border-radius: 8px; font-size: 16px; font-weight: 500; cursor: pointer; transition: all 0.3s ease; border: none; }
.back-button { background: rgba(108, 117, 125, 0.5); color: var(--text-primary); }
.action-btn { background: var(--primary-gradient); color: white; margin-top: 15px; }
.action-btn:hover { transform: scale(1.02); opacity: 0.9; }
.mastered-tag { color: var(--success-color); }
.review-tag { color: var(--text-accent); }
.mastered-tag, .review-tag { font-size: 0.8rem; vertical-align: middle; font-family: var(--font-heading); }
#timer { position: absolute; top: 15px; right: 15px; width: 40px; height: 40px; border-radius: 50%; background-color: var(--text-accent); color: var(--bg-content); font-size: 1.2em; font-weight: bold; transition: all 0.5s; border: 2px solid var(--bg-main); display: flex; align-items: center; justify-content: center; }
#theme-toggle { font-size: 1.5rem; background: none; border: none; cursor: pointer; color: var(--text-secondary); transition: transform 0.3s ease, color 0.3s; }
#theme-toggle:hover { transform: scale(1.2) rotate(15deg); color: var(--warning-color); }
.placeholder-text { text-align: center; color: var(--text-secondary); padding: 40px 20px; }
/* B·ªî SUNG: CSS cho n√∫t ph√°t √¢m (ƒê√É B·ªä LO·∫†I B·ªé) */
/*
.speak-btn { background: none; border: none; cursor: pointer; font-size: 1.5rem; color: var(--text-secondary); transition: all 0.2s ease; vertical-align: middle; padding: 0 5px;}
.speak-btn:hover { color: var(--text-accent); transform: scale(1.2); }
*/
/* CSS cho ph·∫ßn th·ª≠ th√°ch v√¥ h·∫°n */
.infinite-challenge-section { margin-top: 20px; padding-top: 15px; border-top: 1px solid var(--border-color); text-align: center; }
@media (max-width: 600px) {
    body { padding: 5px; }
    .container { padding: 15px; }
    .card h2 { font-size: 1.8rem; }
    .choice-btn, #answerInput { font-size: 16px; }
    .lesson-controls { flex-direction: column; }
    .header-top h1 { font-size: 1.5rem; }
}
`;
document.head.appendChild(style);
